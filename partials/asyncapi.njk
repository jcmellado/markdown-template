{#- Copyright (c) 2020, Juan Mellado. All rights reserved. Use of this
    source is governed by a MIT-style license found in the LICENSE file. -#}

{% from "./asyncapi/channel.njk" import channelsTemplate -%}
{% from "./asyncapi/info.njk" import contactTemplate, licenseTemplate, termsOfServiceTemplate -%}
{% from "./asyncapi/message.njk" import messagesTemplate -%}
{% from "./asyncapi/security.njk" import securitySchemesTemplate -%}
{% from "./asyncapi/server.njk" import serversTemplate -%}
{% from "./asyncapi/tag.njk" import tagTemplate -%}
{% from "./asyncapi/toc.njk" import tocTemplate -%}

# {{ asyncapi.info().title() }} {{ asyncapi.info().version() }}

{% if asyncapi.info().description() | isDefined -%}
{{ asyncapi.info().description() | safe }}

{% endif -%}
{% set sections = params["sections"] | chunks -%}
{% if params["tocHeadingLevel"] !== "0" -%}
## Table of Contents

{{ tocTemplate(asyncapi, sections, params["tocHeadingLevel"]) -}}
{% endif -%}
{% for section in sections -%}
{% if section === "servers" and asyncapi.hasServers() -%}
# Servers

{{ serversTemplate(asyncapi.servers(), params["sections.servers"]) -}}
{% elif section === "channels" and asyncapi.hasChannels() -%}
# Channels

{{ channelsTemplate(asyncapi.channels(), params["sections.channels"]) -}}
{% elif section === "messages" and asyncapi.allMessages() | length -%}
# Messages

{{ messagesTemplate(asyncapi.allMessages(), params["sections.messages"], asyncapi.defaultContentType(), params["slate.enabled"]) -}}
{% elif section === "security" and asyncapi.hasComponents() and asyncapi.components().securitySchemes() and asyncapi.components().securitySchemes() | length -%}
# Security

{{ securitySchemesTemplate(asyncapi.components().securitySchemes()) -}}
{% elif section === "tags" and asyncapi.hasTags() -%}
# Tags

{% for tag in asyncapi.tags() -%}
## {{ tag.name() }}

{{ tagTemplate(tag) -}}
{% endfor -%}
{% elif section === "license" and asyncapi.info().license() -%}
# License

{{ licenseTemplate(asyncapi.info().license()) -}}
{% elif section === "termsOfService" and asyncapi.info().termsOfService() | isDefined -%}
# Terms Of Service

{{ termsOfServiceTemplate(asyncapi.info().termsOfService()) -}}
{% elif section === "contact" and asyncapi.info().contact() -%}
# Contact

{{ contactTemplate(asyncapi.info().contact()) -}}
{% endif -%}
{% endfor -%}

---

{% if asyncapi.id() | isDefined -%}
{{ "Schema Id:" | bold }} {{ asyncapi.id() | code }}

{% endif -%}
{{ "AsyncAPI" | italic }} {{ asyncapi.version() | italic }}
