asyncapi: 2.0.0

info:
  title: Proxy
  version: 1.0.0

channels:

  dummy:
    bindings:
      ws:
        query:
          type: object
          properties:
            range:
              type: integer
              format: int32
              minimum: 0
              maximum: 10
            exclusive:
              type: integer
              format: int32
              exclusiveMinimum: 50
              exclusiveMaximum: 100
            multiple:
              type: number
              format: double
              multipleOf: 7
            length:
              type: string
              minLength: 1
              maxLength: 15
            format:
              type: string
              format: date-time
            pattern:
              type: string
              pattern: ^[\w\d\-\_]+$
            sequence:
              type: array
              minItems: 1
              maxItems: 5
              uniqueItems: true
            protocol:
              title: Protocol.
              description: Name of the protocol to be used.
              type: string
              enum:
                - HTTP
                - HTTPS
              default: HTTPS
              deprecated: true
            port:
              title:  Port number.
              type: integer
              format: int32
            url:
              title: URL.
              type: string
              examples:
                - dev.example.com
                - pro.example.com
            user:
              title: User.
              type: object
              properties:
                name:
                  type: string
                  title: Name.
                surname:
                  type: string
                  title: Surname.
                token:
                  type: string
                  writeOnly: true
            region:
              title: Region.
              type: string
              const: EU
              readOnly: true
            simple:
              title: Array of strings.
              type: array
              items:
                type: string
            tuple:
              title: Array of tuples.
              type: array
              items:
                - type: string
                - type: integer
                - type: string
            extra:
              title: Array of strings with additional numeric items.
              type: array
              items:
                type: string
              additionalItems:
                type: integer
            contains:
              title: Array with one or more elements matching some schema.
              type: array
              contains:
                type: string
                format: date
            sized:
              type: object
              minProperties: 1
              maxProperties: 5
            additional:
              title: Object with additional properties.
              type: object
              properties:
                name:
                  type: string
                surname:
                  type: string
              additionalProperties:
                type: object
                properties:
                  age:
                    type: integer
            blocked:
              title: Object with fixed properties.
              type: object
              properties:
                name:
                  type: string
                surname:
                  type: string
              additionalProperties: false
            named:
              type: object
              title: Object with property names matching some pattern.
              propertyNames:
                type: object
                properties:
                  pattern:
                    const: ^[\w\d\-\_]+$
            properties:
              type: object
              title: Object with properties matching some patterns.
              patternProperties:
                "^S+$":
                  type: string
                "^I+$":
                  type: integer
            allOf:
              title: Matches all the given schemas.
              type:
                integer
              allOf:
                - type: integer
                  format: int32
                - type: integer
                  format: int64
            oneOf:
              title: Matches exactly one schema.
              oneOf:
                - type: string
                - type: integer
            anyOf:
              title: Matches one or more schemas.
              type:
                - object
                - string
              anyOf:
                - type: object
                  properties:
                    name:
                      type: string
                    surname:
                      type: string
                - type: string
            not:
              title: Doesn't match the given schema.
              not:
                type: string
            address:
              title: Address object with a conditional postal code property.
              type: object
              properties:
                street:
                  type: string
                country:
                  type: string
              if:
                type: object
                properties:
                  country:
                    type: string
                    const: USA
              then:
                type: object
                properties:
                  postalCode:
                    type: string
                    pattern: ^[0-9]{5}(-[0-9]{4})?$
              else:
                type: object
                properties:
                  postalCode:
                    type: string
                    pattern: ^[A-Z][0-9][A-Z] [0-9][A-Z][0-9]$
          required:
            - port
            - url
